import { GoogleGenerativeAI } from '@google/generative-ai'
import { OnboardingData } from '@/types'

// Verificar se a chave da API est√° dispon√≠vel
const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY

if (!apiKey) {
  console.warn('‚ö†Ô∏è NEXT_PUBLIC_GEMINI_API_KEY n√£o encontrada. Sugest√µes de IA n√£o funcionar√£o.')
}

// Inicializar o cliente Gemini
const genAI = apiKey ? new GoogleGenerativeAI(apiKey) : null

export const generateSuggestion = async (
  contextualAnswers: {
    mood: string[]
    freeTime: string
    location: string
    specificDesire: string
    lifeFront: string[]
  },
  onboardingData?: OnboardingData
): Promise<string> => {
  console.log('=== DEBUG: Iniciando gera√ß√£o de sugest√£o ===')
  console.log('API Key presente:', !!apiKey)
  console.log('GenAI inicializado:', !!genAI)
  
  if (!genAI) {
    console.error('‚ùå GenAI n√£o inicializado - API Key ausente')
    throw new Error('API Key do Gemini n√£o configurada')
  }

  try {
    console.log('üîß Obtendo modelo Gemini...')
    const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' })
    console.log('‚úÖ Modelo obtido com sucesso')

    // Construir o prompt com contexto
    console.log('üìù Construindo prompt...')
    const prompt = buildPrompt(contextualAnswers, onboardingData)
    console.log('‚úÖ Prompt constru√≠do, tamanho:', prompt.length, 'caracteres')

    console.log('üöÄ Chamando API do Gemini...')
    const result = await model.generateContent(prompt)
    console.log('‚úÖ Resposta recebida da API')
    
    const response = await result.response
    const text = response.text()
    console.log('‚úÖ Texto extra√≠do, tamanho:', text.length, 'caracteres')

    return text.trim()
  } catch (error) {
    console.error('‚ùå Erro detalhado ao gerar sugest√£o:', error)
    console.error('Tipo do erro:', typeof error)
    console.error('Mensagem do erro:', error instanceof Error ? error.message : 'Erro desconhecido')
    
    if (error instanceof Error) {
      if (error.message.includes('API key')) {
        throw new Error('Chave da API inv√°lida. Verifique a configura√ß√£o.')
      } else if (error.message.includes('quota')) {
        throw new Error('Limite de uso da API atingido. Tente novamente mais tarde.')
      } else if (error.message.includes('network')) {
        throw new Error('Erro de conex√£o. Verifique sua internet e tente novamente.')
      }
    }
    
    throw new Error('N√£o foi poss√≠vel gerar uma sugest√£o no momento. Tente novamente.')
  }
}

const buildPrompt = (
  contextualAnswers: {
    mood: string[]
    freeTime: string
    location: string
    specificDesire: string
    lifeFront: string[]
  },
  onboardingData?: OnboardingData
): string => {
  console.log('üîç DEBUG: Construindo prompt com dados:', {
    mood: contextualAnswers.mood,
    freeTime: contextualAnswers.freeTime,
    location: contextualAnswers.location,
    specificDesire: contextualAnswers.specificDesire,
    lifeFront: contextualAnswers.lifeFront
  })
  
  let prompt = `Voc√™ √© um assistente especializado em ajudar pessoas a sair da rotina e viver experi√™ncias mais significativas no dia a dia.

CONTEXTO ATUAL DO USU√ÅRIO:
- Humor/Estado emocional: ${contextualAnswers.mood.join(', ')}
- Tempo livre dispon√≠vel: ${contextualAnswers.freeTime}
- Localiza√ß√£o atual: ${contextualAnswers.location}
- Desejo espec√≠fico: ${contextualAnswers.specificDesire || 'N√£o informado'}
- Frente de vida escolhida: ${getLifeFrontText(contextualAnswers.lifeFront)}

DEBUG - Frentes de vida recebidas: ${JSON.stringify(contextualAnswers.lifeFront)}`

  // Adicionar dados do onboarding se dispon√≠veis
  if (onboardingData) {
    prompt += `

PERFIL DO USU√ÅRIO (Onboarding):
- Cidade: ${onboardingData.city || 'N√£o informada'}
- N√≠vel de conforto: ${getComfortLevelText(onboardingData.comfortLevel)}
- Interesses: ${onboardingData.interests?.join(', ') || 'N√£o informados'}
- Restri√ß√µes: ${onboardingData.restrictions?.join(', ') || 'Nenhuma'}
- Estado atual: ${getCurrentStateText(onboardingData.currentState)}`
  }

  prompt += `

INSTRU√á√ïES:
1. Analise o contexto atual e o perfil do usu√°rio
2. Sugira UMA atividade espec√≠fica e realiz√°vel
3. A sugest√£o deve ser:
   - Personalizada para o humor e tempo dispon√≠vel
   - Apropriada para a localiza√ß√£o atual
   - Alinhada com os interesses do usu√°rio (se dispon√≠veis)
   - Respeitar as restri√ß√µes mencionadas
   - Considerar o desejo espec√≠fico se informado
   - FOCADA na frente de vida escolhida pelo usu√°rio

4. ESTRUTURA OBRIGAT√ìRIA da resposta (siga EXATAMENTE):

üéØ T√çTULO DA EXPERI√äNCIA
- Uma a√ß√£o espec√≠fica e impactante com emoji
- Exemplos: "üéØ Prepare um Banh Mi caseiro!" ou "üéØ Fa√ßa um piquenique noturno no parque!"
- DEVE ser direto e mostrar claramente o que fazer

üìñ CONTEXTO INSPIRADOR (2-3 frases)
- Explique o que √© a experi√™ncia e por que vale a pena
- Conecte com o humor e tempo dispon√≠vel do usu√°rio
- Seja inspirador mas realista sobre o benef√≠cio

üîó LINKS √öTEIS (3-5 links confi√°veis)
- Links para YouTube, blogs, receitas, tutoriais detalhados
- DEVE ser: "üîó Link: [t√≠tulo descritivo] - [URL completa]"
- Exemplo: "üîó Link: Receita completa do Banh Mi - https://www.youtube.com/watch?v=..."
- Apenas links relevantes e confi√°veis para execu√ß√£o real

üí° DICAS OPCIONAIS (apenas se realmente √∫teis)
- Locais espec√≠ficos para comprar algo
- Playlists prontas, truques contextuais
- NADA de dicas √≥bvias como "pesquise online" ou "procure tutoriais"
- Exemplo: "üí° Dica: Compre os ingredientes no Mercado Municipal, se√ß√£o de temperos asi√°ticos"

5. REGRAS IMPORTANTES:
- SEMPRE sugira a√ß√µes espec√≠ficas e realiz√°veis
- EVITE sugest√µes gen√©ricas como "medite" ou "respire fundo"
- FOQUE em experi√™ncias que criem mem√≥rias reais
- Links devem ser relevantes e confi√°veis para execu√ß√£o
- Dicas s√≥ se forem realmente agregadoras
- Seja pr√°tico, direto e inspirador
- A frente de vida escolhida deve ser o FOCO PRINCIPAL da sugest√£o
- Se "Surpreenda-me" foi escolhido, use o contexto geral + humor + tempo para escolher uma frente automaticamente

EXEMPLO DE RESPOSTA ESPERADA:

üéØ Prepare um Banh Mi caseiro!

üìñ Esta experi√™ncia gastron√¥mica vai te dar uma dose de criatividade e sabor! Perfeito para seu momento de t√©dio e 30 minutos livres, voc√™ vai transformar ingredientes simples em uma refei√ß√£o memor√°vel que vai te surpreender.

üîó LINKS √öTEIS:
üîó Link: Receita completa do Banh Mi - https://www.youtube.com/watch?v=abc123
üîó Link: Lista de ingredientes e substitutos - https://blog.com/banh-mi-ingredientes
üîó Link: Dicas de preparo passo a passo - https://receitas.com/banh-mi-guia

üí° DICAS OPCIONAIS:
üí° Dica: Compre os ingredientes no Mercado Municipal, se√ß√£o de temperos asi√°ticos
üí° Dica: Playlist "Vietnamese Street Food" no Spotify para ambientar

EXEMPLOS POR FRENTE DE VIDA:
- üé® Criatividade: "Pinte um quadro abstrato com cores vibrantes!"
- üåø Natureza: "Fa√ßa uma caminhada noturna no parque da cidade!"
- ü§ù Social: "Chame um amigo para um caf√© improvisado!"
- üßò‚Äç‚ôÇÔ∏è Espiritualidade: "Medite ao ar livre com sons da natureza!"
- üèÉ‚Äç‚ôÇÔ∏è Movimento: "Fa√ßa uma sess√£o de yoga ao p√¥r do sol!"
- üçΩÔ∏è Gastronomia: "Prepare um prato t√≠pico de outra cultura!"
- üé≠ Cultura: "Visite uma exposi√ß√£o de arte local!"
- üé≤ Surpreenda-me: IA escolhe baseado no contexto geral

Gere uma sugest√£o personalizada seguindo EXATAMENTE essa estrutura:`

  return prompt
}

const getComfortLevelText = (level?: string): string => {
  const levels = {
    comfort: 'Quer conforto e leveza',
    routine: 'Quer sair um pouco da rotina',
    challenge: 'Pode ser desafiado de leve',
    surprise: 'Pode ser surpreendido de verdade'
  }
  return levels[level as keyof typeof levels] || 'N√£o informado'
}

const getCurrentStateText = (state?: string): string => {
  const states = {
    automatic: 'No piloto autom√°tico',
    pleasure: 'Buscando prazer',
    stimulus: 'Precisando de est√≠mulo',
    memories: 'Focado em criar mem√≥rias'
  }
  return states[state as keyof typeof states] || 'N√£o informado'
}

const getLifeFrontText = (lifeFronts: string[]): string => {
  const lifeFrontMap = {
    creativity: 'üé® Criatividade / Hobbies criativos',
    nature: 'üåø Contato com a Natureza / Outdoor',
    social: 'ü§ù Social / Relacionamentos',
    spirituality: 'üßò‚Äç‚ôÇÔ∏è Espiritualidade / Autocuidado',
    movement: 'üèÉ‚Äç‚ôÇÔ∏è Movimento f√≠sico / Esporte leve',
    gastronomy: 'üçΩÔ∏è Gastronomia / Sensorial',
    culture: 'üé≠ Cultura / Explora√ß√£o urbana',
    surprise: 'üé≤ Surpreenda-me (IA escolhe)'
  }
  
  if (lifeFronts.length === 0) return 'N√£o informada'
  
  const texts = lifeFronts.map(front => lifeFrontMap[front as keyof typeof lifeFrontMap] || front)
  return texts.join(', ')
} 